package com.example.tourtravelserver.controller;

import com.example.tourtravelserver.dto.PaymentRequest;
import com.example.tourtravelserver.entity.Booking;
import com.example.tourtravelserver.repository.IBookingRepository;
import com.example.tourtravelserver.service.IBookingService;
import com.example.tourtravelserver.service.IMailService;
import com.example.tourtravelserver.service.impl.PaymentService;
import com.example.tourtravelserver.service.vnpay.VNPayService;
import com.example.tourtravelserver.util.VNPayUtil;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.Optional;
import java.util.TreeMap;


/**
 * Controller x·ª≠ l√Ω lu·ªìng thanh to√°n VNPay
 */
@RestController
@RequestMapping("/api/payment")
@RequiredArgsConstructor
public class PaymentController {

    private final PaymentService paymentService;
    private final VNPayService vnPayService;
    private final IBookingService bookingService;

    private final IMailService mailService;

    @Value("${app.frontend.url}")
    private String frontendUrl;

    /**
     * T·∫°o li√™n k·∫øt thanh to√°n VNPay
     */
    @PostMapping("/create")
    public Map<String, String> createPayment(@RequestBody PaymentRequest payload,
                                             HttpServletRequest request) {
        Long bookingId = payload.getBookingId();
        long amount = payload.getTotalAmount();
        String orderInfo = payload.getOrderInfo() == null
                ? "Booking|" + bookingId
                : payload.getOrderInfo();

        String paymentUrl = vnPayService.createPaymentUrl(request, bookingId, amount, orderInfo);

        return Map.of("paymentUrl", paymentUrl);
    }

    /**
     * VNPay callback tr·∫£ v·ªÅ k·∫øt qu·∫£ thanh to√°n
     */
    @GetMapping("/vn-pay-callback")
    public void paymentCallback(@RequestParam Map<String, String> allParams,
                                HttpServletResponse response) throws IOException {

        // --- Ki·ªÉm tra tham s·ªë b·∫Øt bu·ªôc ---
        if (allParams.get("vnp_Amount") == null || allParams.get("vnp_TxnRef") == null || allParams.get("vnp_OrderInfo") == null) {
            response.sendRedirect(frontendUrl + "/payment-result?success=false&message=Missing+parameters");
            return;
        }

        // --- X√°c minh ch·ªØ k√Ω hash ---
        String vnp_SecureHash = allParams.remove("vnp_SecureHash");
        String data = VNPayUtil.buildQueryString(new TreeMap<>(allParams));
        String expectedHash = VNPayUtil.hmacSHA512(vnPayService.getConfig().getVnpHashSecret(), data);

        assert expectedHash != null;
        boolean validSignature = expectedHash.equals(vnp_SecureHash);
        String responseCode = allParams.get("vnp_ResponseCode");
        boolean success = validSignature && "00".equals(responseCode);
        String errorMessage = VNPAY_ERROR_CODES.getOrDefault(responseCode, "L·ªói kh√¥ng x√°c ƒë·ªãnh");
        String message;

        if (success) {
            message = "Thanh to√°n th√†nh c√¥ng!";
        } else if (validSignature) {
            message = "Giao d·ªãch kh√¥ng th√†nh c√¥ng. " + errorMessage;
        } else {
            message = "X√°c minh ch·ªØ k√Ω th·∫•t b·∫°i!";
        }

        long amount = Long.parseLong(allParams.get("vnp_Amount")) / 100;
        String[] parts = allParams.get("vnp_OrderInfo").split("\\|");
        String txnRef = allParams.get("vnp_TxnRef");

        String service = parts[0];
        Long bookingId = Long.valueOf(parts[1]);

        // --- G·ªçi x·ª≠ l√Ω thanh to√°n (d√π th√†nh c√¥ng hay th·∫•t b·∫°i) ---
        String status = success ? "success" : "failed";
        paymentService.handlePaymentResult(txnRef, amount, service, bookingId, status);

        Optional<Booking> bookingOpt = bookingService.findById(bookingId);


        // --- Redirect v·ªÅ frontend ---
        String redirectUrl;
        if (success && bookingOpt.isPresent()) {
            Booking booking = bookingOpt.get();
            try {
                // üëâ G·ª≠i email x√°c nh·∫≠n + v√© ƒë√≠nh k√®m
                mailService.sendBookingConfirmation(booking, txnRef);
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println("‚ùå G·ª≠i email th·∫•t b·∫°i: " + e.getMessage());
            }

            redirectUrl = String.format(
                    "%s/payment-result?success=true&message=%s&bookingId=%d&txnRef=%s&tourId=%d",
                    frontendUrl,
                    URLEncoder.encode("Thanh to√°n th√†nh c√¥ng cho booking #" + booking.getId(), StandardCharsets.UTF_8),
                    booking.getId(),
                    txnRef,
                    booking.getTourSchedule().getTour().getId()         // th√™m tourId
            );
        } else {
            redirectUrl = String.format(
                    "%s/payment-result?success=false&message=%s&service=%s",
                    frontendUrl,
                    URLEncoder.encode(message, StandardCharsets.UTF_8),
                    URLEncoder.encode(service, StandardCharsets.UTF_8)
            );
        }

        response.sendRedirect(redirectUrl);
    }

    private static final Map<String, String> VNPAY_ERROR_CODES = Map.ofEntries(
            Map.entry("00", "Giao d·ªãch th√†nh c√¥ng"),
            Map.entry("07", "Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù"),
            Map.entry("09", "Th·∫ª/T√†i kho·∫£n ch∆∞a ƒëƒÉng k√Ω InternetBanking"),
            Map.entry("10", "Kh√°ch h√†ng x√°c th·ª±c th·∫•t b·∫°i"),
            Map.entry("11", "H·∫øt h·∫°n ch·ªù thanh to√°n"),
            Map.entry("12", "Th·∫ª/T√†i kho·∫£n b·ªã kh√≥a"),
            Map.entry("13", "Nh·∫≠p sai OTP qu√° s·ªë l·∫ßn"),
            Map.entry("24", "Kh√°ch h√†ng h·ªßy giao d·ªãch"),
            Map.entry("51", "T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞"),
            Map.entry("65", "V∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch"),
            Map.entry("75", "Ng√¢n h√†ng ƒëang b·∫£o tr√¨"),
            Map.entry("79", "Nh·∫≠p sai OTP"),
            Map.entry("99", "L·ªói kh√¥ng x√°c ƒë·ªãnh")
    );
}
